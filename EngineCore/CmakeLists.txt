cmake_minimum_required(VERSION 3.13 FATAL_ERROR)

set(ENGINE_PROJECT_NAME EngineCore)

set(ENGINE_PUBLIC_INCLUDES
        includes/EngineCore/Application.hpp 
        includes/EngineCore/Logs.hpp 
        includes/EngineCore/Event.hpp 
        includes/EngineCore/Camera.hpp 
        includes/EngineCore/Keys.hpp
        includes/EngineCore/Input.hpp 

)

set(ENGINE_PRIVATE_INCLUDES
    includes/EngineCore/Window.hpp
 
    src/EngineCore/Rendering/OpenGL/ShaderProgram.hpp 
    src/EngineCore/Rendering/OpenGL/VertexBuffer.hpp  
    src/EngineCore/Rendering/OpenGL/VertexArray.hpp  
    src/EngineCore/Rendering/OpenGL/IndexBuffer.hpp 
    src/EngineCore/Rendering/OpenGL/Renderer_OpenGL.hpp 
    src/EngineCore/Rendering/OpenGL/Texture2D.hpp 
    src/EngineCore/Rendering/OpenGL/Mesh.hpp

    src/EngineCore/Modules/UIModule.hpp
    src/EngineCore/Modules/FileRead.hpp 

)

set(ENGINE_PRIVATE_SOURCES
    src/EngineCore/Application.cpp
    src/EngineCore/Window.cpp
    src/EngineCore/Camera.cpp
    src/EngineCore/Input.cpp 

    src/EngineCore/Rendering/OpenGL/ShaderProgram.cpp
    src/EngineCore/Rendering/OpenGL/VertexBuffer.cpp
    src/EngineCore/Rendering/OpenGL/VertexArray.cpp 
    src/EngineCore/Rendering/OpenGL/IndexBuffer.cpp 
    src/EngineCore/Rendering/OpenGL/Renderer_OpenGL.cpp 
    src/EngineCore/Rendering/OpenGL/Texture2D.cpp 
    src/EngineCore/Rendering/OpenGL/Mesh.cpp

    src/EngineCore/Modules/UIModule.cpp
    src/EngineCore/Modules/FileRead.cpp 
)

set(ENGINE_ALL_SOURCES 
    ${ENGINE_PUBLIC_INCLUDES}
    ${ENGINE_PRIVATE_INCLUDES}
    ${ENGINE_PRIVATE_SOURCES}
)

add_library(${ENGINE_PROJECT_NAME} STATIC 
    ${ENGINE_ALL_SOURCES}
)

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES 
    ${ENGINE_ALL_SOURCES} 
)

target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC includes)
target_include_directories(${ENGINE_PROJECT_NAME} PRIVATE src)
target_compile_features(${ENGINE_PROJECT_NAME} PUBLIC cxx_std_20)

set(PUBLIC_LINKED_LIB 
    spdlog 
    assimp 
)

set(PRIVATE_LINKED_LIB
    glfw 
    glad 
    glm 
)

foreach(LIB_NAME ${PUBLIC_LINKED_LIB}) 
    add_subdirectory(../external/${LIB_NAME} ${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME})
    target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC ${LIB_NAME})
endforeach()

foreach(LIB_NAME ${PRIVATE_LINKED_LIB})
    add_subdirectory(../external/${LIB_NAME} ${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME})
    target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE ${LIB_NAME})
endforeach()


set(IMGUI_INCLUDES
    ../external/ImGui/imgui.h 
    ../external/ImGui/backends/imgui_impl_glfw.h 
    ../external/ImGui/backends/imgui_impl_opengl3.h 
)

set(IMGUI_SOURCES 
    ../external/ImGui/imgui.cpp
    ../external/ImGui/backends/imgui_impl_glfw.cpp  
    ../external/ImGui/backends/imgui_impl_opengl3.cpp 
    ../external/ImGui/imgui_demo.cpp 
    ../external/ImGui/imgui_tables.cpp 
    ../external/ImGui/imgui_widgets.cpp 
    ../external/ImGui/imgui_draw.cpp 
)

add_library(IMGUI STATIC 
    ${IMGUI_INCLUDES}
    ${IMGUI_SOURCES}
)

target_include_directories(IMGUI PUBLIC ../external)
target_include_directories(IMGUI PUBLIC ../external/ImGui)

target_link_libraries(IMGUI PRIVATE glad glfw)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE IMGUI)

include_directories(../external/stb_image)
link_directories(../external/stb_image)

add_executable(${ENGINE_PROJECT_NAME}
    EngineCore/Shaders/LightVertexShader.glsl 
)